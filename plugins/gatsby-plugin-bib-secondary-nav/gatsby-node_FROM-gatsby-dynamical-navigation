import fs from 'fs'
import getLinks from './utils/getLinks'
import sortLinks from './utils/sortLinks'
import getTree from './utils/getTree'
import createNodes from './utils/createNodes'
import markRoots from './utils/markRoots'

/**
 * Generates Gatsby nodes for the secondary navigation structure.
 *
 * This function is called by Gatsby's `sourceNodes` API to create nodes for the
 * secondary navigation structure. It retrieves the navigation tree, extracts
 * the links, sorts them, creates the nodes, and marks the root nodes.
 *
 * @param {object} actions - Gatsby actions object
 * @param {function} createContentDigest - Gatsby function to create content digest
 * @param {function} getNode - Gatsby function to retrieve a node
 * @param {function} getNodes - Gatsby function to retrieve all nodes
 * @returns {void}
 */
export const sourceNodes = ({ actions, createContentDigest, getNode, getNodes }) => {
  const { createNode, createParentChildLink, createNodeField } = actions

  const tree = getTree()
  const links = getLinks(tree)
  const sortedLinks = sortLinks(links)

  createNodes(sortedLinks, getNode, createContentDigest, createNode, createParentChildLink)
  markRoots(getNodes, createNodeField)
}

export const createPages = async ({ graphql }) => {
  const { errors, data } = await graphql(`
    {
      allSiteNavigation(filter: { fields: { isRoot: { eq: true } } }) {
        edges {
          node {
            title
            path
            childrenSiteNavigation {
              title
              path
              order
              fields {
                isRoot
              }
            }
          }
        }
      }
    }
  `)

  if (errors) {
    errors.forEach((e) => console.error(e.toString()))
    return errors
  }

  const reducedData = data.allSiteNavigation.edges.map(({ node }) => node)

  fs.writeFileSync('public/site-navigation.json', JSON.stringify(reducedData))
};

